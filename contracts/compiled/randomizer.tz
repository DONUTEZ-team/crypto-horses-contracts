{ view "getRandomBetween" (pair (nat %_from) (nat %_to)) nat
        { { { DUP ; CAR ; DIP { CDR } } } ;
          SWAP ;
          DUP ;
          DUG 2 ;
          GET 3 ;
          NOW ;
          PACK ;
          CONCAT ;
          SHA256 ;
          SHA256 ;
          PUSH nat 0 ;
          PUSH nat 0 ;
          { DIP 2 { DUP } ; DIG 3 } ;
          SIZE ;
          DUP ;
          { DIP 3 { DUP } ; DIG 4 } ;
          COMPARE ;
          LT ;
          LOOP { { DIP 5 { DUP } ; DIG 6 } ;
                 CAR ;
                 CDR ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 PUSH nat 1 ;
                 { DIP 5 { DUP } ; DIG 6 } ;
                 SLICE ;
                 IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                 GET ;
                 IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                 PUSH nat 256 ;
                 DIG 3 ;
                 MUL ;
                 ADD ;
                 SWAP ;
                 PUSH nat 1 ;
                 DIG 3 ;
                 ADD ;
                 DUG 2 ;
                 DUP ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 COMPARE ;
                 LT } ;
          DROP ;
          SWAP ;
          DROP ;
          SWAP ;
          DROP ;
          DIG 2 ;
          DROP ;
          SWAP ;
          DUP ;
          DUG 2 ;
          CAR ;
          PUSH int 1 ;
          DIG 3 ;
          { { DUP ; CAR ; DIP { CDR } } } ;
          SWAP ;
          SUB ;
          ADD ;
          ISNAT ;
          IF_NONE { PUSH int 227 ; FAILWITH } {} ;
          DIG 2 ;
          EDIV ;
          IF_NONE { PUSH int 227 ; FAILWITH } { CDR } ;
          ADD } ;
  view "getRandomBetweenEntropy" (pair (nat %_from) (pair (nat %_to) (nat %entropy)))
        nat
        { { { DUP ; CAR ; DIP { CDR } } } ;
          DUP ;
          GET 4 ;
          PACK ;
          SHA256 ;
          SHA256 ;
          PUSH nat 0 ;
          PUSH nat 0 ;
          { DIP 2 { DUP } ; DIG 3 } ;
          SIZE ;
          DUP ;
          { DIP 3 { DUP } ; DIG 4 } ;
          COMPARE ;
          LT ;
          LOOP { { DIP 5 { DUP } ; DIG 6 } ;
                 CAR ;
                 CDR ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 PUSH nat 1 ;
                 { DIP 5 { DUP } ; DIG 6 } ;
                 SLICE ;
                 IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                 GET ;
                 IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                 PUSH nat 256 ;
                 DIG 3 ;
                 MUL ;
                 ADD ;
                 SWAP ;
                 PUSH nat 1 ;
                 DIG 3 ;
                 ADD ;
                 DUG 2 ;
                 DUP ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 COMPARE ;
                 LT } ;
          DROP ;
          SWAP ;
          DROP ;
          SWAP ;
          DROP ;
          DIG 2 ;
          DROP ;
          SWAP ;
          DUP ;
          DUG 2 ;
          CAR ;
          PUSH int 1 ;
          DIG 3 ;
          DUP ;
          CAR ;
          SWAP ;
          GET 3 ;
          SUB ;
          ADD ;
          ISNAT ;
          IF_NONE { PUSH int 236 ; FAILWITH } {} ;
          DIG 2 ;
          EDIV ;
          IF_NONE { PUSH int 236 ; FAILWITH } { CDR } ;
          ADD } ;
  view "getRandomBetweenEntropyBytes"
        (pair (pair (nat %_from) (nat %_to))
              (pair (bytes %entropy) (bool %includeRandomizerEntropy)))
        nat
        { { { DUP ; CAR ; DIP { CDR } } } ;
          DUP ;
          GET 3 ;
          SWAP ;
          DUP ;
          DUG 2 ;
          GET 4 ;
          IF { { DIP 2 { DUP } ; DIG 3 } ; GET 3 ; SWAP ; CONCAT } {} ;
          DUP ;
          SHA256 ;
          SHA256 ;
          PUSH nat 0 ;
          PUSH nat 0 ;
          { DIP 2 { DUP } ; DIG 3 } ;
          SIZE ;
          DUP ;
          { DIP 3 { DUP } ; DIG 4 } ;
          COMPARE ;
          LT ;
          LOOP { { DIP 6 { DUP } ; DIG 7 } ;
                 CAR ;
                 CDR ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 PUSH nat 1 ;
                 { DIP 5 { DUP } ; DIG 6 } ;
                 SLICE ;
                 IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                 GET ;
                 IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                 PUSH nat 256 ;
                 DIG 3 ;
                 MUL ;
                 ADD ;
                 SWAP ;
                 PUSH nat 1 ;
                 DIG 3 ;
                 ADD ;
                 DUG 2 ;
                 DUP ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 COMPARE ;
                 LT } ;
          DROP ;
          SWAP ;
          DROP ;
          SWAP ;
          DROP ;
          SWAP ;
          DROP ;
          DIG 2 ;
          DROP ;
          SWAP ;
          DUP ;
          DUG 2 ;
          CAR ;
          CAR ;
          PUSH int 1 ;
          DIG 3 ;
          DUP ;
          CAR ;
          CAR ;
          SWAP ;
          CAR ;
          CDR ;
          SUB ;
          ADD ;
          ISNAT ;
          IF_NONE { PUSH int 249 ; FAILWITH } {} ;
          DIG 2 ;
          EDIV ;
          IF_NONE { PUSH int 249 ; FAILWITH } { CDR } ;
          ADD } ;
  parameter (or
              (or (address %addAdmin)
                  (or (address %delAdmin)
                      (pair %getRBC (nat %_from)
                                    (pair (nat %_to) (address %callback_address)))))
              (or
                (pair %getRBCE (pair (nat %_from) (nat %_to))
                               (pair (address %callback_address) (nat %entropy)))
                (or
                  (pair %getRBCEB (pair (nat %_from) (nat %_to))
                                  (pair (address %callback_address)
                                        (pair (bytes %entropy)
                                              (bool %includeRandomizerEntropy))))
                  (nat %setEntropy)))) ;
  storage (pair (pair (set %admins address) (map %bytes_to_nat bytes nat))
                (pair (bytes %entropy) (big_map %metadata string bytes))) ;
  code { { { DUP ; CAR ; DIP { CDR } } } ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 MEM ;
                 IF
                   {}
                   { PUSH string "Only admin can call this entrypoint" ; FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 PUSH bool True ;
                 DIG 4 ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 NIL operation }
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     MEM ;
                     IF
                       {}
                       { PUSH string "Only admin can call this entrypoint" ; FAILWITH } ;
                     SWAP ;
                     { { DUP ; CAR ; DIP { CDR } } } ;
                     { { DUP ; CAR ; DIP { CDR } } } ;
                     PUSH bool False ;
                     DIG 4 ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     NIL operation }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     NOW ;
                     PACK ;
                     CONCAT ;
                     SHA256 ;
                     SHA256 ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     SIZE ;
                     DUP ;
                     { DIP 3 { DUP } ; DIG 4 } ;
                     COMPARE ;
                     LT ;
                     LOOP { { DIP 5 { DUP } ; DIG 6 } ;
                            CAR ;
                            CDR ;
                            { DIP 4 { DUP } ; DIG 5 } ;
                            PUSH nat 1 ;
                            { DIP 5 { DUP } ; DIG 6 } ;
                            SLICE ;
                            IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                            GET ;
                            IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                            PUSH nat 256 ;
                            DIG 3 ;
                            MUL ;
                            ADD ;
                            SWAP ;
                            PUSH nat 1 ;
                            DIG 3 ;
                            ADD ;
                            DUG 2 ;
                            DUP ;
                            { DIP 3 { DUP } ; DIG 4 } ;
                            COMPARE ;
                            LT } ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     NIL operation ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     GET 4 ;
                     CONTRACT nat ;
                     IF_NONE { PUSH int 193 ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     CAR ;
                     PUSH int 1 ;
                     DIG 6 ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     GET 3 ;
                     SUB ;
                     ADD ;
                     ISNAT ;
                     IF_NONE { PUSH int 191 ; FAILWITH } {} ;
                     DIG 5 ;
                     EDIV ;
                     IF_NONE { PUSH int 191 ; FAILWITH } { CDR } ;
                     ADD ;
                     TRANSFER_TOKENS ;
                     CONS } } }
           { IF_LEFT
               { DUP ;
                 GET 4 ;
                 PACK ;
                 SHA256 ;
                 SHA256 ;
                 PUSH nat 0 ;
                 PUSH nat 0 ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 SIZE ;
                 DUP ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 COMPARE ;
                 LT ;
                 LOOP { { DIP 5 { DUP } ; DIG 6 } ;
                        CAR ;
                        CDR ;
                        { DIP 4 { DUP } ; DIG 5 } ;
                        PUSH nat 1 ;
                        { DIP 5 { DUP } ; DIG 6 } ;
                        SLICE ;
                        IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                        GET ;
                        IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                        PUSH nat 256 ;
                        DIG 3 ;
                        MUL ;
                        ADD ;
                        SWAP ;
                        PUSH nat 1 ;
                        DIG 3 ;
                        ADD ;
                        DUG 2 ;
                        DUP ;
                        { DIP 3 { DUP } ; DIG 4 } ;
                        COMPARE ;
                        LT } ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 NIL operation ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 GET 3 ;
                 CONTRACT nat ;
                 IF_NONE { PUSH int 203 ; FAILWITH } {} ;
                 PUSH mutez 0 ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 CAR ;
                 CAR ;
                 PUSH int 1 ;
                 DIG 6 ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 CAR ;
                 CDR ;
                 SUB ;
                 ADD ;
                 ISNAT ;
                 IF_NONE { PUSH int 201 ; FAILWITH } {} ;
                 DIG 5 ;
                 EDIV ;
                 IF_NONE { PUSH int 201 ; FAILWITH } { CDR } ;
                 ADD ;
                 TRANSFER_TOKENS ;
                 CONS }
               { IF_LEFT
                   { DUP ;
                     GET 5 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 6 ;
                     IF { { DIP 2 { DUP } ; DIG 3 } ; GET 3 ; SWAP ; CONCAT } {} ;
                     DUP ;
                     SHA256 ;
                     SHA256 ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     SIZE ;
                     DUP ;
                     { DIP 3 { DUP } ; DIG 4 } ;
                     COMPARE ;
                     LT ;
                     LOOP { { DIP 6 { DUP } ; DIG 7 } ;
                            CAR ;
                            CDR ;
                            { DIP 4 { DUP } ; DIG 5 } ;
                            PUSH nat 1 ;
                            { DIP 5 { DUP } ; DIG 6 } ;
                            SLICE ;
                            IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                            GET ;
                            IF_NONE { PUSH int 155 ; FAILWITH } {} ;
                            PUSH nat 256 ;
                            DIG 3 ;
                            MUL ;
                            ADD ;
                            SWAP ;
                            PUSH nat 1 ;
                            DIG 3 ;
                            ADD ;
                            DUG 2 ;
                            DUP ;
                            { DIP 3 { DUP } ; DIG 4 } ;
                            COMPARE ;
                            LT } ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     NIL operation ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     GET 3 ;
                     CONTRACT nat ;
                     IF_NONE { PUSH int 217 ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     CAR ;
                     CAR ;
                     PUSH int 1 ;
                     DIG 6 ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     SUB ;
                     ADD ;
                     ISNAT ;
                     IF_NONE { PUSH int 215 ; FAILWITH } {} ;
                     DIG 5 ;
                     EDIV ;
                     IF_NONE { PUSH int 215 ; FAILWITH } { CDR } ;
                     ADD ;
                     TRANSFER_TOKENS ;
                     CONS }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     MEM ;
                     IF
                       {}
                       { PUSH string "Only admin can call this entrypoint" ; FAILWITH } ;
                     PACK ;
                     SHA256 ;
                     UPDATE 3 ;
                     NIL operation } } } ;
         PAIR } }
